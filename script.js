let nums = [];
let answer = [];
let difficulty = "";
let countNum = 0;
let numChoices = 4;
let endTime;
let totalTime;
let score = 0;
let startTime = null;
let timerStarted = false;


function selectDifficulty() {
    const selected = document.querySelector('input[name="difficulty"]:checked');
    if (!selected) return;

    difficulty = selected.value;
    localStorage.setItem('selectedDifficulty', difficulty); // L∆∞u l·∫°i ch·∫ø ƒë·ªô
    location.reload(); // Reload l·∫°i trang
}

function init() {
    const guessArea = document.getElementById('guess-area');
    guessArea.innerHTML = ''; // X√≥a c≈©

    for (let i = 0; i < numChoices; i++) {
        const select = document.createElement('select');
        select.className = 'choice';
        select.addEventListener('change', () => {
            if (!timerStarted) {
                startTime = new Date();
                timerStarted = true;
                console.log("‚è± B·∫Øt ƒë·∫ßu t√≠nh th·ªùi gian!");
            }
        });
        nums.forEach(num => {
            const option = document.createElement('option');
            option.value = num;
            option.text = num;
            select.appendChild(option);
        });
        guessArea.appendChild(select);
    }

    generateAnswer();
    

}

function generateAnswer() {
    answer = [];

    if (difficulty === "easy") {
        // Kh√¥ng tr√πng
        let temp = [...nums];
        for (let i = 0; i < 4; i++) {
            const idx = Math.floor(Math.random() * temp.length);
            answer.push(temp[idx]);
            temp.splice(idx, 1);
        }
    } else {
        // C√≥ th·ªÉ tr√πng
        for (let i = 0; i < numChoices; i++) {
            const randomNumber = nums[Math.floor(Math.random() * nums.length)];
            answer.push(randomNumber);
        }
    }
    console.log("Answer (for testing):", answer);
}

function submitGuess() {
    const selects = document.querySelectorAll('.choice');
    let guess = Array.from(selects).map(select => select.value);
    let correctPosition = 0;
    let correctColor = 0;

    let answerCopy = [...answer];
    let guessCopy = [...guess];

    for (let i = 0; i < guess.length; i++) {
        if (guess[i] === answer[i]) {
            correctPosition++;
            answerCopy[i] = null;
            guessCopy[i] = null;
        }
    }

    for (let i = 0; i < guess.length; i++) {
        if (guessCopy[i] && answerCopy.includes(guessCopy[i])) {
            correctColor++;
            answerCopy[answerCopy.indexOf(guessCopy[i])] = null;
        }
    }

    countNum++;
    const feedback = document.getElementById('feedback');
    if (difficulty === "easy") {
        feedback.innerHTML += `<div class="response">L·∫ßn ${countNum}: B·∫°n ch·ªçn: ${guess.join(", ")} 
        <br>K·∫øt qu·∫£: ${correctPosition} v·ªã tr√≠ ch√≠nh x√°c</div><hr>`;

    } else {
        feedback.innerHTML += `<div class="response">L·∫ßn ${countNum}: B·∫°n ch·ªçn: ${guess.join(", ")} 
    <br>K·∫øt qu·∫£: ${correctPosition} v·ªã tr√≠ ch√≠nh x√°c, ${correctColor} s·ªë ƒë√∫ng nh∆∞ng sai v·ªã tr√≠</div><hr>`;
    }
    feedback.scrollTop = feedback.scrollHeight;

    if (countNum === 21 && difficulty === "hard") {
        playAlertSound();
        setTimeout(() => {
            alert("B·∫°n ƒë√£ h·∫øt l∆∞·ª£t ch∆°i, reset thoai!"); location.reload();

        }, 300);
    }

    else if (countNum === 11 && (difficulty === "easy" || difficulty === "medium")) {
        playAlertSound();
        setTimeout(() => {
            alert("B·∫°n ƒë√£ h·∫øt l∆∞·ª£t ch∆°i, reset thoai!"); location.reload();

        }, 300);
    }

    if (correctPosition === answer.length) {
        playWinSound();
        triggerWinEffect();

    }
}
// Reset game
function resetGame() {
    location.reload();
}
// √Çm thanh th√¥ng b√°o
function playAlertSound() {
    const sound = document.getElementById("alertSound");
    sound.currentTime = 0;
    sound.play();
}
function playWinSound() {
    const sound = document.getElementById("winSound");
    sound.currentTime = 0;
    sound.play();
}
// Hi·ªán popup
function showPopup() {
    document.getElementById('popup').style.display = 'block';
    document.getElementById('popup-overlay').style.display = 'block';
}
// ƒê√≥ng popup
function closePopup() {
    document.getElementById('popup').style.display = 'none';
    document.getElementById('popup-overlay').style.display = 'none';
}
function closewPopup() {
    document.getElementById("winPopup").style.display = "none";
}
// Hi·ªáu ·ª©ng chi·∫øn th·∫Øngth·∫Øng
function triggerWinEffect() {
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            confetti({
                particleCount: 100,
                spread: 70,
                origin: { y: 0.6 }
            });
        }, i * 300);
    }
    endTime = new Date();
    totalTime = Math.floor((endTime - startTime) / 1000); // T√≠nh th·ªùi gian ch∆°i (gi√¢y)

    // T√≠nh ƒëi·ªÉm: b·∫°n c√≥ th·ªÉ t·ª± ch·ªânh theo m·ª©c ƒë·ªô
    // V√≠ d·ª•: ƒëi·ªÉm = (s·ªë l∆∞·ª£t t·ªëi ƒëa - s·ªë l∆∞·ª£t ƒë√£ d√πng + 1) * h·ªá s·ªë theo ƒë·ªô kh√≥ - th·ªùi gian
    let maxTurns = (difficulty === "hard") ? 21 : 11;
    let baseScore = (maxTurns - countNum + 1) * 10;

    if (difficulty === "medium") baseScore *= 1.5;
    if (difficulty === "hard") baseScore *= 2;

    score = Math.max(0, Math.floor(baseScore - totalTime));

    // Hi·ªÉn th·ªã th·ªùi gian v√† ƒëi·ªÉm
    document.getElementById("winPopup").innerHTML += `
    <h2>üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ chi·∫øn th·∫Øng!</h2>
    <div>‚è± Th·ªùi gian ch∆°i: ${totalTime} gi√¢y</div>
    <div>üèÜ ƒêi·ªÉm c·ªßa b·∫°n: ${score} ƒëi·ªÉm</div>
    <button onclick="resetGame()" class="reset">Ch∆°i l·∫°i</button>
`;
    // Hi·ªÉn th·ªã popup th·∫Øng
    document.getElementById("winPopup").style.display = "block";
}

window.onload = () => {
    const savedDifficulty = localStorage.getItem('selectedDifficulty');

    difficulty = savedDifficulty;
    document.getElementById('game').style.display = 'block';

    // B·∫≠t l·∫°i radio ƒë√£ ch·ªçn
    const radios = document.querySelectorAll('input[name="difficulty"]');
    radios.forEach(radio => {
        if (radio.value === difficulty) {
            radio.checked = true;
        }
    });

    if (difficulty === "easy") {
        nums = ["1", "2", "3", "4"];
        numChoices = 4;
    } else if (difficulty === "medium") {
        nums = ["1", "2", "3", "4", "5", "6", "7"];
        numChoices = 4;
    } else if (difficulty === "hard") {
        nums = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
        numChoices = 6;
    }

    init();

};
